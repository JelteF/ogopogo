################################################################################
#GLOBAL CONFIG
################################################################################
#simple config that starts up an uml instance
#  host1 --- sw0  ---  host2
#             |
#          sniffer1

[global]

#this defines where to store the control files and pid files for uml_switch
switch_path= /tmp

#path where to store cow files
cow_path= /tmp

#base root image
root_image= /root/uml_debian.img

#memory per uml instance
mem = 36M

#number of switches in topology.
switch_count = 1

################################################################################
#HOST CONFIG
################################################################################

#section name = device hostname
[host1]

#role can be host, bridge, router, sniffer
role= host

#directory on host that will be mounted in /root inside the uml instance
#this directory is writable FROM the instance
home=/root/uml_home

#interface name = <switchid to which the interface is connected to> , <ipv4 address>,<ipv6 address>
#switch ids start from 0
eth0 = 0,10.0.0.1/8,

#all variables prefixed by pass_ are passed to the uml instance as environment variables with pass_ stripped
#the example below passes foo=bar to the uml instance. Variables can be accessed with ${var} inside the instance
pass_foo = 'bar'

[host2]
role=host
home=/root/uml_home
eth0=0,10.0.0.2/8,

[sniffer1]
role = sniffer
#tcpdump writes in home in the format  $hostname-`date +%H%M`.dmp
home =/root/dumps
#for a sniffer we don't specify an ip address.
eth0 = 0,,
eth1 = tap1,,

#this executes the script from  home  ( in this case /root/dumps/test.sh from the uml host)
pass_script = test.sh
