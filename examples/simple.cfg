################################################################################
#GLOBAL CONFIG
################################################################################
#simple config that starts up an uml instance
#  host1 --- (sw0)  ---  host2
#             |
#          sniffer1

[global]
#this defines where to store the control files and pid files for uml_switch and cow files
session_path= /tmp

#base root image shared by all hosts
root_image= /tmp/disk.img

#memory per uml instance
mem = 36M

#number of broadcast domains in  the topology (effectively switches..).
broadcast_domains = 1

################################################################################
#HOST CONFIG
################################################################################

#section name = device hostname
[host1]

#role can be host, bridge, router, sniffer
role= host

#directory on host that will be mounted in /root inside the uml instance
#this directory is writable FROM the instance
home=/tmp/

#interface name = <the broadcast domain id to which the interface is connected to> , <ipv4 address>,<ipv6 address>
#domain ids start from 0! Notice The domain id is mandatory. You can specify only ipv4 , only ipv6 or both.
# note that ipv6 is enabled in the host only when an ipv6 address is present here
eth0 = 0,10.0.0.1/8,2001:0db8::1/64

#all variables prefixed by pass_ are passed to the uml instance as environment variables with pass_ stripped
#the example below passes foo=bar to the uml instance. Variables can be accessed with ${var} inside the instance
pass_foo = 'bar'

[host2]
role=host
home=/tmp/
eth0=0,10.0.0.2/8,2001:0db8::2/64

[sniffer1]
role = sniffer
#tcpdump writes in home in the format  $hostname-`date +%H%M`.dmp
home =/tmp/
#for a sniffer we don't specify an ip address.
eth0 = 0,,
eth1 = tap1,,

#this executes the script from  home  ( in this case /tmp/dumps/test.sh from the uml host)
pass_script = test.sh
